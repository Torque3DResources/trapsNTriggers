// ============================================================================== 
//a simple case: enter a trigger, get harmed
// ============================================================================== 
//EnvironmentalDamager periodic evaluation based on it's .tickPeriodMS
function EnvironmentalDamager::onTickTrigger(%this,%trigger)
{	
    // see how many objects are within a given trigger
	%count = %trigger.getNumObjects();
	// see how many are of a valid type
	%victimCount = 0;	
	for (%i=0;%i<%count;%i++)
	{
		%victim = %trigger.getObject(%i);
		if (%victim.getType() &$TypeMasks::PlayerObjectType)
		{
			%victimCount++;
		}
	}
	//if any exist
	if (%victimCount>0)
	{
		for (%i=0;%i<%count;%i++)
		{
			%victim = %trigger.getObject(%i);
            %damageMask = $TypeMasks::PlayerObjectType | $TypeMasks::VehicleObjectType;
			if (%victim.getType() & %damageMask)
			{
                //hurt them
                %victim.damage(%trigger, %trigger.position, %this.TriggerDamage, "environmmental");
			}
		}
	}
}

// ============================================================================== 
// a more complex case: 
// using a prefab in conjunction with internalname lookups 
// to give players a visual lead that they may take damage
// ============================================================================== 
//traptriggerdata periodic evaluation based on it's .tickPeriodMS
//this particular trigger is for setting the trap off
function TrapTriggerData::onTickTrigger(%this,%trigger)
{	
	%count = %trigger.getNumObjects();	
	%victimCount = 0;
	
	for (%i=0;%i<%count;%i++)
	{
        //check objects within the trigger
		%victim = %trigger.getObject(%i);
        
        //deterine object type
        %damageMask = $TypeMasks::PlayerObjectType | $TypeMasks::VehicleObjectType;
	    if (%victim.getType() & %damageMask)
		{
            //if valid, increment
			%victimCount++;
		}
	}
    //check the group prefab this trigger is a part of for the
    //internalname of another object labeled vis
    //this corresponds to a StaticShape object that
    //unlike tsstatics, can recieve commands
    
	%visobject = %trigger.parentGroup-->vis;
    //activate the trap
    //look it up from the shared datablock namespace level
    %visobject.getDatablock().setActive(%visobject,(%victimCount>0));
}

//activate a trap
function trapData::setActive(%this, %obj, %activate)
{
    if (%obj.activeState == %activate) return;
    
    //start or stop an animation based on triggered state
    if (%activate)
    {
        %obj.playAudio(0,%this.ambientSound);
        %obj.playthread(0, "Trip");
        %obj.activeState = true;
    }
    else
    {
        %obj.stopthread(0);        
        %obj.activeState = false;
    }
}

// on completion of a given animation, 
// if a trap datablock has a method defined in the form
// on<AnimName>, execute it
function trapData::onEndSequence(%this, %obj, %slot, %name)
{
   %script = "on" @ %name;
   if(%this.isMethod(%script))
      %this.call(%script, %obj);
}
// with a StaticShapeData pointing at a shape  
// with an animation labeled Trip
// onEndSequence generates an attept at calling onTrip
function trapData::onTrip(%this,%obj)
{
    // as earlier, we check the larger triggers prefab 
    // for a secondary trigger with an internalname of damager
    %damageTrigger = %obj.parentGroup-->damager;
	%count = %damageTrigger.getNumObjects();	
	%victimCount = 0;	
	for (%i=0;%i<%count;%i++)
	{
		%victim = %damageTrigger.getObject(%i);
        %damageMask = $TypeMasks::PlayerObjectType | $TypeMasks::VehicleObjectType;
        if (%victim.getType() & %damageMask)
		{
			%victimCount++;
		}
	}
    
    %xform = %damageTrigger.getTransform();
    %pos = getWords(%xform,0,2);          
    %vec  = getWords(%xform,3,5);
    
    //if we've caught a valid damageable object within the smaller trigger
	if (%victimCount>0)
	{
		for (%i=0;%i<%count;%i++)
		{
			%victim = %damageTrigger.getObject(%i);
            %damageMask = $TypeMasks::PlayerObjectType | $TypeMasks::VehicleObjectType;
			if (%victim.getType() & %damageMask)
			{                
                //hurt them
                %victim.damage(%damageTrigger, %damageTrigger.position, %this.TriggerDamage, "trap");
                if (%victim.getType() & $TypeMasks::VehicleObjectType)
                {
                    %victim.applyImpulse(%pos, vectorScale(%vec,%victim.getDatablock().mass*2));
                }
			}
		}
	}
    //set the trap back by playing a followthrough animation
    %obj.playthread(0, "TripDone");
}

//followthrough animation callback to reset the state
function trapData::onTripDone(%this,%obj)
{
    %obj.activeState = false;
}

// ============================================================================== 
// non trigger based
// ============================================================================== 
// exploding barrel. 'nuff said
// ============================================================================== 
function boomBarrel::damage(%this, %obj, %sourceObject, %position, %damage, %damageType)
{
   if ((!isObject(%obj) || !%damage) || %obj.getDamageState() !$= "Enabled")
      return;

   //note that if an objet has an animation labeled "damage"
   //and a datablock with a destroyedLevel entry
   //not only will the health tracking number change
   //but a blended animation will be applied as a percentage of accumulated damage to that value
   %obj.applyDamage(%damage);
   
   //determine the direction damage came from
   %impulseVec = vectorSub(%obj.position,%position);
   %impulseVec = vectorNormalize(%impulseVec);
   
   //apply an impulse based on how much damage it took
   //and how much force it would take to move that much mass
   %impulseVec = vectorMul(%impulseVec, (%damage / %this.maxDamage) * (%this.mass*32));
   %obj.applyImpulse(%position,%impulseVec );
   
   //if we've taken more than the destroyed level, explode, then delete ourselves
   //do note you *must* ensure you flip the damage state over to destroyed 
   // to avoid an infinite recursion
   if (%obj.getDamageState() $= "Enabled" && %obj.getDamageLevel()>%this.destroyedLevel)
   {
        %obj.blowUp();
        //radiusDamage(%sourceObject, %position, %radius, %damage, %damageType, %impulse)
        %obj.setDamageState("Destroyed");
        radiusDamage(%obj, %obj.position, 10, 50, "explosion", 1000);
        %obj.schedule(32, "delete");
   }
}

function boomBarrel::onImpact(%this, %obj, %collObj, %vec, %len )
{
   if ((!isObject(%obj) || %obj.getDamageState() !$= "Enabled"))
      return;
      
    //echo(%this SPC %obj SPC %collObj SPC %vec SPC %len );
    %dmgPos = VectorAdd(%obj.getPosition(), %vec);
    %dmgAmt = getMin(%len/%this.minImpactSpeed, %this.mass/%this.maxDamage);
    
    if (%dmgAmt>2)
        %this.damage(%obj, %collObj, %dmgPos, %dmgAmt, "impact");
}

// ============================================================================== 
// and what set of traps is complete without a nice relaxing acid bath
// ============================================================================== 
//first check if a player enters a relevant liquid
function playerData::onEnterLiquid(%this, %obj, %coverage, %type)
{
    if (%type $= "Ick") //if so, apply a damage-over-time effect
        %obj.acidDot = %obj.getDatablock().schedule(1000, "takeDot", %obj, %type, 5);
}

// schedule can be used to call a method recursively
// note that it returns a handle to the scheduled methodcall event 
function playerData::takeDot(%this, %obj, %type, %damage)
{
    cancel(%obj.acidDot);
    %obj.applyDamage(%damage);
    %obj.acidDot = %obj.getDatablock().schedule(1000, "takeDot", %obj, %type, 5);
}

//do note a recursively called method *must* be manually canceled
function playerData::onLeaveLiquid(%this, %obj, %type)
{
    cancel(%obj.acidDot);
}